from supabase import create_client, Client
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import asyncio
import logging
import os
from dotenv import load_dotenv
load_dotenv()

# Supabase
url: str = os.environ.get("SUPABASE_URL")
key: str = os.environ.get("SUPABASE_KEY")
supabase: Client = create_client(url, key)

# Telegram
TELEGRAM_KEY = os.environ.get("TELEGRAM_KEY")
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TELEGRAM_KEY)
dp = Dispatcher()

# Handlers
# /start: show entry inline buttons
@dp.message(CommandStart())
async def handle_start_command(message: Message):
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å –æ –¥–æ–º–µ", callback_data="start_get_info")
    keyboard.button(text="üí¨ –í—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç", callback_data="start_join_chat")
    keyboard.adjust(2)
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ—Å–µ–¥–µ–π. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup()
    )


# FSM: states for the join chat flow
class JoinChat(StatesGroup):
    consent_share_flat = State()
    selecting_building = State()
    awaiting_flat_number = State()


# Callback: ‚ÑπÔ∏è –£–∑–Ω–∞—Ç—å –æ –¥–æ–º–µ
@dp.callback_query(F.data == "start_get_info")
async def on_get_info(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("‚öíÔ∏è –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")


# Callback: üí¨ –í—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç
@dp.callback_query(F.data == "start_join_chat")
async def on_join_chat(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω"), KeyboardButton(text="‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await state.set_state(JoinChat.consent_share_flat)
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–º–µ—Ä–∞ –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏ –¥–∞–Ω–Ω—ã—Ö Telegram-–∞–∫–∫–∞—É–Ω—Ç–∞. –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ —Å–æ—Å–µ–¥—Å—Ç–≤–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—Å –≤ —á–∞—Ç",
        reply_markup=keyboard
    )


# Message: consent response ‚Üí ask for building or decline
@dp.message(JoinChat.consent_share_flat, F.text.in_(["‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω"]))
async def on_consent_yes(message: Message, state: FSMContext):
    keyboard = InlineKeyboardBuilder()
    building_names = ["2", "2–∫1", "2–∫4", "2–∫5"]
    for building_name in building_names:
        keyboard.button(
            text=building_name,
            callback_data=f"building_{building_name}"
        )
    keyboard.adjust(4)
    await state.set_state(JoinChat.selecting_building)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=keyboard.as_markup()
    )


# Message: consent declined
@dp.message(JoinChat.consent_share_flat, F.text.in_(["‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω"]))
async def on_consent_no(message: Message, state: FSMContext):
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîÑ –ü–µ—Ä–µ–¥—É–º–∞–ª", callback_data="start_join_chat")
    keyboard.adjust(1)
    await message.answer(
        "–ü–æ–Ω–∏–º–∞—é. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö —è –Ω–µ —Å–º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ —á–∞—Ç",
        reply_markup=keyboard.as_markup()
    )


# Message: other text in consent state
@dp.message(JoinChat.consent_share_flat)
async def on_consent_invalid(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞: '‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω' –∏–ª–∏ '‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω'")


# Callback: building selected ‚Üí ask for flat number
@dp.callback_query(JoinChat.selecting_building, F.data.startswith("building_"))
async def on_building_selected(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    selected = callback.data.split("_")[-1]
    await state.update_data(building=selected)
    await state.set_state(JoinChat.awaiting_flat_number)
    await callback.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã",
        reply_markup=None
    )


# Message: valid flat number received ‚Üí confirm and clear state
@dp.message(JoinChat.awaiting_flat_number, F.text.regexp(r"^\d{1,5}$"))
async def on_flat_number(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        building = data.get("building")
        flat_number = message.text
        telegram_id = message.from_user.id
        username = message.from_user.username or "Unknown"
        first_name = message.from_user.first_name or "Unknown"
        last_name = message.from_user.last_name or ""
        
        # Check if this specific flat for this user already exists
        existing_flat = supabase.table("users").select("*").eq("telegram_id", telegram_id).eq("building", building).eq("flat_number", flat_number).execute()
        
        if existing_flat.data:
            # This specific flat already exists for this user
            await state.clear()
            await message.answer(
                f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —á–∞—Ç–µ —Å–æ—Å–µ–¥–µ–π –¥–æ–º–∞ {building}, –∫–≤–∞—Ä—Ç–∏—Ä–∞ {flat_number}. –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è."
            )
        else:
            # Check if user exists but with different flat/building
            existing_user = supabase.table("users").select("*").eq("telegram_id", telegram_id).execute()
            
            if existing_user.data:
                # User exists, add new flat record
                user_data = {
                    "telegram_id": telegram_id,
                    "username": username,
                    "first_name": first_name,
                    "last_name": last_name,
                    "building": building,
                    "flat_number": flat_number,
                    "joined_at": "now()"
                }
                
                result = supabase.table("users").insert(user_data).execute()
                
                await state.clear()
                await message.answer(
                    f"–û—Ç–ª–∏—á–Ω–æ! –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞: –¥–æ–º {building}, –∫–≤–∞—Ä—Ç–∏—Ä–∞ {flat_number}"
                )
            else:
                # New user, insert first record
                user_data = {
                    "telegram_id": telegram_id,
                    "username": username,
                    "first_name": first_name,
                    "last_name": last_name,
                    "building": building,
                    "flat_number": flat_number,
                    "joined_at": "now()"
                }
                
                result = supabase.table("users").insert(user_data).execute()
                
                await state.clear()
                await message.answer(
                    f"–û—Ç–ª–∏—á–Ω–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç —Å–æ—Å–µ–¥–µ–π –¥–æ–º–∞ {building}, –∫–≤–∞—Ä—Ç–∏—Ä–∞ {flat_number}. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ."
                )
        
    except Exception as e:
        logging.error(f"Error storing user data: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É @xmlChay (–ò–ª—å—è)"
        )


# Message: invalid flat number ‚Üí re-prompt
@dp.message(JoinChat.awaiting_flat_number)
async def on_flat_number_invalid(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())